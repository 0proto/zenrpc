package main

import (
	"text/template"
)

var (
	serviceTemplate = template.Must(template.New("service").Parse(`
// generated by zenrpc; DO NOT EDIT

package {{.PackageName}}

import (
	"encoding/json"
	"context"

	"github.com/sergeyfast/zenrpc"
	"github.com/sergeyfast/zenrpc/smd"
)

{{ range .Services}}
func ({{.Name}}) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{}
}

// Invoke is as generated code from zenrpc cmd
func (s {{.Name}}) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}

	switch method {
	{{range .Methods }}
	case "{{.LowerCaseName}}":
		// A int ` + "`json:\"a\"`" + `
		var args = struct {
			{{ range .Args }}
			{{.CapitalName}} {{.Type}} ` + "`json:\"{{.JsonName}}\"`" + ` {{ end }}
		}{}

		if err := json.Unmarshal(params, &args); err != nil {
			return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, err.Error(), nil)
		}

		resp.Set(s.{{.Name}}({{if .HasContext}}ctx, {{end}} {{ range .Args }}args.{{.CapitalName}}, {{ end }}))
	{{ end }}
	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
{{ end }}
`))
)
